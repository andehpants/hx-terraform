#!/usr/bin/env python2
#
# Helper to follow the workflow of having one git commit per code phab code review. This script
# automatically calls the arc command, with the apprioriate args, depending on if we are creating
# a new review, or updating an existing one.
#
# It also amends the commit to include a link to the PR, for future reference.
#
# USAGE (First time): tools/phabify.py Reviewer [Reviewer]
# USAGE (On update): tools/phabify.py
#
#    If you would like to push up PRs for changes other than the HEAD commit, then perform an interactive rebase
#    and push up PRs as you go along.

import subprocess
import os
import sys

USER = os.environ['USER']
CC = "#helix_omniscient"

def call(*cmd):
    p = subprocess.Popen(cmd, bufsize=0)
    p.wait()
    if p.returncode != 0:
        raise SystemExit,1

def show(fmt, rev):
    #Can't use 'call', as we actually care about the output in this case
    return subprocess.check_output(["git", "show", "-s", "--format=" + fmt, rev]).strip()

def has_revision(body):
    for l in body.splitlines():
        if 'differential revision:' in l.lower():
            return True
    return False

body = show('%b', 'HEAD')

if has_revision(body):
    msg = ' '.join(sys.argv[1:]) or 'phupdate'
    call("arc", "diff", "--allow-untracked", "-m", msg, "HEAD^1")
else:
    if len(sys.argv[1:]) == 0:
        print "Specify reviewers"
        raise SystemExit,1

    cmd = ["arc", "diff", "--allow-untracked", "--cc", CC, "--verbatim", "--browse", "--reviewers"] + [' '.join(sys.argv[1:])] + ["HEAD^1"]
    call(*cmd)

print "Pushing branch for CI"
call("git", "push", "--quiet", "-f", "origin", "HEAD:refs/heads/for-ci/%s" % USER)
